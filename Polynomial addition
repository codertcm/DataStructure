#include <stdio.h>
#include <stdlib.h>

#define TRUE 1
#define FLASE 0

typedef struct Node {
    float coef;
    int exp;
    struct Node *next;
}Node, *PLinkList;

PLinkList AddPolyn (PLinkList pa, PLinkList pb) {
    PLinkList p,q,r,s;
    int cmp,x;
    p = pa->next;
    q = pb->next;
    r = pb;
    s = pa;
    while (p != NULL && q != NULL) {
        if (p->exp < q->exp) {
            cmp = -1;
        } else if (p->exp > q->exp) {
            cmp = 1;
        } else {
            cmp = 0;
        }
        switch (cmp) {
            case -1: {
                s = p;
                p = p->next;
                break;
            }
            case 0: {
                x = p->coef + q->coef;
                if (x != 0) {
                    p->coef = x;
                    s = p;
                    p = p->next;
                } else {
                    s->next = p->next;
                    free(p);
                    p = s->next;
                }
                r->next = q->next;
                free(q);
                q = r->next;
                break;
            }
            case 1: {
                r->next = q->next;
                q->next = s->next;
                s->next = q;
                s = q;
                q = r->next;
                break;
            }
        }
    }
    if(q != NULL) {
        s->next = q;
    }
    free(pb);
    return pa;
}

PLinkList Node_Malloc()
{
    PLinkList t;
    t = (PLinkList) malloc(sizeof(Node));
    if (t == NULL) {
        printf("ERROR,please try again!\n");
        return NULL;
    }
    t->next = NULL;
    return t;
}


void Link_Insert(PLinkList head, float ceof, int exp)
{
    PLinkList f,p,s;
    f = head;
    p = head->next;
    while (p != NULL && p->exp <= exp) {
        p = p->next;
        f = f->next;
    }
    s = Node_Malloc();
    s->coef = ceof;
    s->exp = exp;
    f->next = s;
    s->next = p;
}

void Link_Destroy(PLinkList head)
{
    PLinkList p,t;
    p = head;
    while (p != NULL) {
        t = p->next;
        free(p);
        p = t;
    }
}

void Link_Build (char serial,PLinkList head)
{
    float ceof;
    int exp;
    printf("please the %c polyn ends with -1 { format for 1.3(x^2)+2.7(x^3)-1 }: \n",serial);
    while (scanf("%f",&ceof) != EOF) {
        if(ceof == -1) {
            break;
        }
        scanf("(x^%d)",&exp);
        Link_Insert(head, ceof, exp);
    }
    printf("\n");
}

void Link_Print (PLinkList head)
{
    PLinkList p;
    p = head->next;
    if(p != NULL) {
        printf("%.2f(x^%d)",p->coef,p->exp);
        p = p->next;
    }
    while(p != NULL) {
        printf("+%.2f(x^%d)",p->coef,p->exp);
        p = p->next;
    }
    printf("\n");
}

int main()
{
    PLinkList pa,pb;
    pa = Node_Malloc();
    pb = Node_Malloc();
    Link_Build('A', pa);
    Link_Build('B', pb);
    pa = AddPolyn(pa,pb);
    Link_Print(pa);
    Link_Destroy(pa);
    Link_Destroy(pb);
    return 0;
}





